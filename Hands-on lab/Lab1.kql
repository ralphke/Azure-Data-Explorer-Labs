// 🏃‍♂️ You can run a query by placing the cursor anywhere on the query text and clicking the run button (or Shift + Enter).
// 📄 KQL overview https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/ 
// 📃 Quick KQL reference guide can be found here https://docs.microsoft.com/en-us/azure/data-explorer/kql-quick-reference


// Remember getting data in our own cluster started with:
.set  RawSysLogs <| cluster("help").database("SampleLogs").RawSysLogs | take 0

cluster("help").database("SampleLogs").RawSysLogs | summarize End= max(timestamp), Start = min(timestamp)


.set-or-replace  RawSysLogs <| cluster("help").database("SampleLogs").RawSysLogs | where timestamp < todatetime("2022-03-01");
.append  RawSysLogs <| cluster("help").database("SampleLogs").RawSysLogs | where timestamp < todatetime("2022-04-01")

//  For now we use the database help/Samples
// Start by browsing data in the StormEvents table, and view a small sample of records
// - Most queries start with a table name (in this case StormEvents that contains U.S weather data).
// - The "take" operator will return the specified number of rows (in this case 10) from the table (not necessarily in order).
// 
StormEvents
| take 10

// Create a calculated column by computing a value for every row
// - The "extend" operator adds a new calculated column.
// - The "project" operator selects the columns to include in the result
StormEvents
| take 5
| extend Duration = EndTime - StartTime
| extend DataType = gettype(Duration)                      
| project StartTime, EndTime, Duration, EventType, State,DataType;    

// Use aggregation functions 
// - The "summarize" operator calculates aggregations. You can use several aggregation functions in one summarize operator
// - The "top" operator returns the first N rows of the dataset when the dataset is sorted
StormEvents 
| summarize StormCount = count(), TypeOfStorms = dcount(EventType) by State     
| top 5 by StormCount desc

// Visualize the data by rendering charts
// - The "render" operator visualizes query result as a chart. It should be the last operator in a query. 
StormEvents
| where EventType =="Flood"
| summarize EventCount = count() by State 
| where EventCount > 100
| render piechart


//Try range & render:

range x from -2 to 2 step 0.1
| extend sin = sin(x), cos = cos(x)
| extend x_sign = iif(x > 0, "x_pos", "x_neg")
| extend sum_sign = iif(sin + cos > 0, "sum_pos", "sum_neg")
| render linechart  with  (ycolumns = sin, cos, series = x_sign, sum_sign)

//Extra task:
// In you own Cluster/DB create a simple time dimension with date_id, date, month_of_year, day_of_month

// Aufgaben von Ralph (ab 6:00)